{"version":3,"sources":["utils/getWeb3.js","App.js","components/Choose/Choose.js","components/MarketOfferModal/MarketOfferModal.js","components/Market/Market.js","components/CreateOffer/CreateOffer.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","App","state","storageValue","accounts","contract","componentDidMount","networkId","deployedNetwork","instance","sent","version","eth","getAccounts","net","getId","EthereumBridge","networks","Contract","abi","address","_this","setState","runExample","alert","error","react_default","createElement","className","Link","to","Component","Choose","class","MarketOfferModal","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","show","id","abrupt","handleChange","event","_event$target","target","value","name","defineProperty","bitcoinAddress","bitcoinTransactionHash","_this2","offer","bitcoinAmount","amountEth","contractAddress","_id","onChange","type","htmlFor","onClick","initializePayout","index","onHide","Market","offersData","activeModal","ethAmount","deployedContract","deployedContractAddress","redeemTxHash","oraclizeApiPrice","getOffersFromDB","EthereumSwap","_address","getBalance","then","res","_callee2","response","offerData","_context2","axios","get","data","initializePayoutProcess","_callee3","_this$state","_context3","methods","getTransaction","send","from","gas","transactionHash","openModal","e","hideModal","_ref4","offers","Fragment","map","key","components_MarketOfferModal_MarketOfferModal","CreateOffer","offerTxHash","createdOffer","depositToContract","preventDefault","depositEther","toString","writeDetailsToDB","contractNetworkId","ownerAddress","post","onSubmit","min","max","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07726112.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:9545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, {Component} from \"react\";\nimport EthereumBridge from \"./contractInterface/EthereumBridge.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport {Link} from 'react-router-dom'\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      console.log(web3.version);\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      // for ganach networkId should be  5777\n      const deployedNetwork = EthereumBridge.networks[networkId];\n      console.log(networkId);\n      // console.log(deployedNetwork.address);\n      const instance = new web3.eth.Contract(EthereumBridge.abi, deployedNetwork && deployedNetwork.address);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n        web3,\n        accounts,\n        contract: instance\n      }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,);\n      console.error(error);\n    }\n  };\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n    return (<section className=\"page\">\n      <div className=\"App\">\n        <h1 className=\"text-large\">\n          Welcome to the Bitcoin Ethereum Bridge\n        </h1>\n        <p>\n          You can exchange Ether and Bitcoin with anyone in the most decentralized way for free!</p>\n        <div >\n          <Link to=\"/choose\">\n            Get Started\n          </Link>\n        </div>\n      </div>\n    </section>);\n  }\n}\n\nexport default App;\n","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport './Choose.css';\n\nclass Choose extends Component {\n  componentWillMount() {\n    console.log(\"will Mounting\");\n  }\n  render() {\n    return (<section class=\"container\">\n      <div class=\"split left\">\n        <div class=\"centered\">\n          <h1>Buy Bitcoins for Ether</h1>\n          <p>Open up a Smart Contract in our market place.</p>\n          <Link to=\"/createOffer\">\n            create a new Smart Contract</Link>\n        </div>\n      </div>\n\n      <div class=\"split right\">\n        <div class=\"centered\">\n          <h1>Buy Ether for Bitcoins</h1>\n          <p>Find an exsisting smart contract to open up your funds</p>\n          <Link to=\"/market\">Go to MarketPlace</Link>\n        </div>\n      </div>\n    </section>)\n  }\n}\n\nexport default Choose;\n","import React, {Component} from \"react\"\nimport './MarketOfferModal.css'\n// import Modal from 'react-modal'\n\nclass MarketOfferModal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      bitcoinAddress: '3GZSJ47MPBw3swTZtCTSK8XeZNPed25bf9',\n      bitcoinTransactionHash: 'b1ddc46ad47f6f95d75129281b22636d5b19a06bcf534305b018fd8e688265e1'\n    }\n  }\n  componentWillMount = async () => {\n    console.log('Modal called');\n    if (!this.props.show) {\n      console.log(this.props.id)\n      return null\n    }\n  }\n  handleChange = (event) => {\n    const {value, name} = event.target\n    console.log(value,name);\n    this.setState({[name]: value})\n  }\n\n  render() {\n    console.log('Modal is rendering');\n    if (!this.props.show) {\n      return null\n    }\n\n    return (<div className=\"modal\">\n      <div className=\"modal-content\">\n        <p>\n          BitcoinAddress: {this.props.offer.bitcoinAddress}</p>\n        <p>\n          Amount BTC: {this.props.offer.bitcoinAmount}</p>\n        <p>\n          Amount to Pay: {this.props.offer.amountEth}</p>\n        <p>\n          Ethereum Address of contract: {this.props.offer.contractAddress}</p>\n        <p>\n          id: {this.props.offer._id}\n        </p>\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <input\n              id=\"bitcoinTransactionHash\"\n              name=\"bitcoinTransactionHash\"\n              value={this.state.bitcoinTransactionHash}\n              onChange={this.handleChange}\n              type=\"text\"\n              className=\"validate\"></input>\n            <label htmlFor=\"amountSatoshi\">\n              Bitcoin Transaction Hash\n            </label>\n          </div>\n        </div>\n          <button onClick={() => {\n              this.props.initializePayout(this.props.index, this.state.bitcoinTransactionHash, this.props.offer.bitcoinAddress)\n            }} type=\"submit\" value=\"initializePayout\" id=\"initializePayout\" className=\"btn waves-effect waves-light orange\">initialize Payout\n          </button>\n        </div>\n        <div className=\"modal-footer\">\n          <button onClick={this.props.onHide} type=\"submit\" value=\"Close\" id=\"initContract\" className=\"btn waves-effect waves-light orange\">Close\n          </button>\n        </div>\n        {\n          //   <div>\n          //     <p>lol</p>\n          // </div>\n          // <div><p>lol</p>\n          //   <div className=\"backdrop\" style={{\n          //     backdropStyle\n          //   }}>\n          //   <div className=\"modal\" style={{\n          //       modalStyle\n          //     }}>\n          //     <p>Modal showing </p>\n          //     <div className=\"footer\">\n          //       <button onClick={this.props.onClose}>\n          //         Close\n          //       </button>\n          //     </div>\n          //   </div>\n          // </div>\n        }\n      </div>)\n  }\n}\nexport default MarketOfferModal\n","import React, {Component} from \"react\"\nimport MarketOfferModal from '../MarketOfferModal/MarketOfferModal'\nimport EthereumSwap from \"../../contractInterface/EthereumSwap.json\"\n\nimport './Market.css'\nimport getWeb3 from \"../../utils/getWeb3\"\nimport axios from 'axios'\n// import img from '../../assets/index.jpeg'\n\nclass Market extends Component {\n  state = {\n    offersData: null,\n    activeModal: null,\n    bitcoinAmount: 615525,\n    ethAmount: 1000000000000000000,\n    web3: null,\n    networkId: null,\n    accounts: null,\n    // account = '0x0',\n    deployedContract: null,\n    deployedContractAddress: null,\n    redeemTxHash: null,\n    oraclizeApiPrice: 500000000000000000\n  }\n\n  componentWillMount = async () => {\n    try {\n      //fetch db for Offers get offers data from constructor\n      const offersData = await this.getOffersFromDB()\n      console.log(offersData);\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3()\n      console.log(web3);\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts()\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId()\n      // for ganach networkId should be  5777\n      const deployedNetwork = EthereumSwap.networks[networkId]\n      // console.log(deployedNetwork.address)\n      const deployedContract = new web3.eth.Contract(EthereumSwap.abi, deployedNetwork && deployedNetwork.address)\n\n      console.log(deployedNetwork.address);\n      console.log(deployedContract._address);\n      web3.eth.getBalance(deployedNetwork.address).then(res => console.log(res))\n      this.setState({offersData, web3, accounts, deployedContract, networkId, deployedContractAddress: deployedNetwork.address})\n\n    } catch (error) {\n      console.error(error)\n    }\n  }\n  handleChange = (event) => {\n    const {value, name} = event.target\n    this.setState({[name]: value})\n  }\n\n  getOffersFromDB = async () => {\n    try {\n      const response = await axios.get('/api/offers')\n      // TODO: make this false once you fix it\n      // let offerData = response.data.filter(data => data.payedOut == true)\n      let offerData = response.data\n      return offerData\n    } catch (e) {\n      console.error(e)\n    }\n  }\n  // TODO:\n  // event.preventDefault() needed?\n  // this.writeDetailsToDB() with payed = true  and payer address\n  //should either get ID from function to process payment or\n  //what it has in state: oraclizeApiPrice, accouts[0], deployedContract (should later choose from Mainnet, my testnet and Ropsten )\n  //maybe just save the ID from the form(it should not render the mongodb but would be good for genereal stuff)\n  //** implement dbWrite() and getOffers()\n  initializePayoutProcess = async (index, bitcoinTransactionHash, bitcoinAddress) => {\n    try {\n      const {accounts, deployedContract, oraclizeApiPrice} = this.state\n      const response = await deployedContract.methods.getTransaction(bitcoinTransactionHash, bitcoinAddress).send({from: accounts[0], value: oraclizeApiPrice, gas: 1500000})\n      console.log(response)\n      this.setState({redeemTxHash: response.transactionHash})\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  openModal = (e, index) => {\n    console.log(index)\n    this.setState({activeModal: index})\n  }\n\n  hideModal = () => {\n    this.setState({activeModal: null})\n  }\n\n\n  render() {\n    console.log('rendering!');\n    console.log(this.state.offersData);\n    const MarketOffers = ({offers}) => {\n      if (offers) {\n        return (<React.Fragment>\n          {\n            offers.map((offer, index) => (<React.Fragment>\n              <div key={offer._id} className=\"container col s12 m6 l4\">\n                <div className=\"advantages card-panel hoverable\">\n                  <div className=\"card-content\">\n                    <span className=\"card-title activator grey-text text-darken-4\">Offer\n                    </span>\n                    <p>\n                      BitcoinAddress: {offer.bitcoinAddress}</p>\n                    <p>\n                      Amount BTC: {offer.bitcoinAmount}</p>\n                    <p>\n                      Amount to Pay: {offer.amountEth}</p>\n                    <p>\n                      Ethereum Address of contract: {offer.contractAddress}</p>\n                    <p>\n                      id: {offer._id}\n                    </p>\n                    <div>\n                      <button id={offer._id} onClick={e => this.openModal(e, index)}>View Details</button>\n                    </div>\n                    <MarketOfferModal\n                      offer={offer}\n                      index={index}\n                      show={this.state.activeModal === index}\n                      onHide={this.hideModal}\n                      initializePayout={this.initializePayoutProcess}\n                      >\n                    </MarketOfferModal>\n                  </div>\n                </div>\n              </div>\n            </React.Fragment>))\n          }\n        </React.Fragment>)\n      } else {\n        return null\n      }\n    }\n\n    return (<div className=\"market-page\">\n      <div className=\"inner-container\">\n        <section className=\"offers\">\n          <div className=\"row\">\n            <MarketOffers offers={this.state.offersData}/>\n          </div>\n        </section>\n      </div>\n    </div>)\n  }\n}\n\nexport default Market\n","import React, {Component} from \"react\";\nimport {Link, }    from 'react-router-dom'\nimport EthereumSwap from \"../../contractInterface/EthereumSwap.json\";\nimport getWeb3 from \"../../utils/getWeb3\";\nimport './CreateOffer.css';\nimport axios from 'axios';\n// import { addOffer } from '../../dbActions/offerAction';\n\nclass CreateOffer extends Component {\n\n  state = {\n    bitcoinAddress: '3GZSJ47MPBw3swTZtCTSK8XeZNPed25bf9',\n    bitcoinAmount: 615525,\n    ethAmount: 1000000000000000000,\n    web3: null,\n    networkId: null,\n    accounts: null,\n    // account = '0x0',\n    deployedContract: null,\n    deployedContractAddress: null,\n    offerTxHash: null,\n    createdOffer: false\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      // for ganach networkId should be  5777\n      const deployedNetwork = EthereumSwap.networks[networkId];\n      // console.log(deployedNetwork.address);\n      const deployedContract = new web3.eth.Contract(EthereumSwap.abi, deployedNetwork && deployedNetwork.address);\n      // const deployedContract = await instance.deployed()\n\n      this.setState({web3, accounts, deployedContract, networkId, deployedContractAddress: deployedContract._address})\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  handleChange = (event) => {\n    const {value, name} = event.target\n    this.setState({[name]: value})\n  }\n\n  // TODO: secify gas price and usage here\n  //Could also use vars to make stateless (but input maintains state anyways)\n  depositToContract = async (event) => {\n    event.preventDefault();\n    try {\n      const {accounts, bitcoinAddress, bitcoinAmount, ethAmount, deployedContract} = this.state;\n\n      const response = await deployedContract.methods.depositEther(bitcoinAddress, bitcoinAmount.toString()).send({from: accounts[0], value: ethAmount, gas: 1500000})\n\n      this.setState({offerTxHash: response.transactionHash, createdOffer: true});\n\n      this.writeDetailsToDB()\n\n    } catch (e) {\n      console.error(e)\n    }\n\n  }\n\n  writeDetailsToDB = async () => {\n    try {\n      console.log(\"writing to db\");\n      // TODO: could add on payout oraclizeID\n      const data = this.state;\n      const offer = {\n        contractAddress: data.deployedContractAddress,\n        contractNetworkId: data.networkId,\n        ownerAddress: data.accounts[0],\n        amountEth: data.ethAmount,\n        bitcoinAddress: data.bitcoinAddress,\n        bitcoinAmount: data.bitcoinAmount,\n        offerTxHash: data.offerTxHash\n      }\n      const response = await axios.post('/api/offers', offer)\n      console.log(response);\n\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  render() {\n\n      // TODO: return a banner here with redirect to market option\n      // should also redirect with information so that the created offer is highlighted\n      // return ()\n      const MarketLink = () => {\n        if (this.state.createdOffer) {\n        return (<React.Fragment>\n          <Link to=\"/market\">Go to MarketPlace</Link>\n        </React.Fragment>)\n      } else {\n        return (<React.Fragment>  </React.Fragment>)\n      }\n    }\n    return (<section className=\"market\">\n      <div className=\"market-page\">\n        <div className=\"container\">\n          <div id=\"one\" className=\"section\">\n            <div className=\"col\">\n              <div id=\"contactCreation\" className=\"advantages offset-l1  col s12 m4 card-panel hoverable\">\n                <h5 className=\"center\">\n                  Create a new Offer to get Bitcoins for your Ether\n                </h5>\n                <MarketLink />\n                <p className=\"light\">\n                  Type in your Bitcoin Address and the amount of Ether or USD you want to set it free\n                </p>\n                <div className=\"row\">\n                  <form onSubmit={this.depositToContract} id=\"contractForm\" className=\"col s12\">\n                    <div className=\"row\">\n                      <div className=\"chips-addresses input-field col s12\">\n                        <input name=\"bitcoinAddress\" value={this.state.bitcoinAddress} onChange={this.handleChange} id=\"bitcoinAddress\" type=\"text\" className=\"validate\"/>\n                        <label htmlFor=\"bitcoinAddress\">\n                          Bitcoin Address</label>\n                      </div>\n                    </div>\n                    <div className=\"row\">\n                      <div className=\"input-field col s6\">\n                        <input id=\"amountSatoshi\" name=\"bitcoinAmount\" value={this.state.bitcoinAmount} onChange={this.handleChange} type=\"number\" min=\"1\" max=\"10000000000\" className=\"validate\"></input>\n                        <label htmlFor=\"amountSatoshi\">\n                          Amount BTC in Satoshi\n                        </label>\n                      </div>\n                      <div className=\"input-field col s6\">\n                        <input id=\"ethAmount\" name=\"ethAmount\" value={this.state.ethAmount} onChange={this.handleChange} type=\"number\" min=\"1\" max=\"100000000000000000000\" className=\"validate\"></input>\n                        <label htmlFor=\"ethAmount\">How much Ether (in Wei) is the BTC worth for you</label>\n                      </div>\n                    </div>\n                    <button type=\"submit\" value=\"Submit\" id=\"initContract\" className=\"btn waves-effect waves-light orange\">Submit\n                    </button>\n                  </form>\n                  <div></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>)\n  }\n}\n\nexport default CreateOffer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Choose from './components/Choose/Choose';\nimport Market from './components/Market/Market';\nimport CreateOffer from './components/CreateOffer/CreateOffer';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nReactDOM.render(\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/choose\" component={Choose} />\n        <Route exact path=\"/market\" component={Market} />\n        <Route exact path=\"/createOffer\" component={CreateOffer} />\n      </Switch>\n  </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}